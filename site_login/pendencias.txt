PRECISA:
- Possiblitar sair do formulario e voltar depois. 'ok'
- Guardar alternativas escolhidas por um usuario.
- Criar apenas uma resposta para cada pergunta. 
- Arrumar redirecionamentos. 
- Tratar mensagens de erro.
- Traduzir endpoints (account, login, etc).
- Setar unique=True para atributos usados em busca
- arrumar campo de nacionalidade, curso, idade e email(melhorar validação)
- criar permissões
- Fazer controle de sessão.
- permitir voltar as perguntas 'ok'
- resolver problema do superuser sem usuario

DA REUNIÃO:
- Confirmar conta pelo email, tirar username e adicionar campo de linguas falados pelo usuario.
- Transformar pergunta em tela:
	- Tela tem id numérico (nativo django), estimulo (midia: foto, video, som ou texto), pergunta, alternativas e tirar o nome dela.
- Adicionar novo atributo em alternativa que indica proxima página (ou fim do formulário).
- Guardar tempo de cada tela e formulário.
- Usar API do yt nos estímulos (não pode pausar o vídeo).
- Quando usuário iniciar formulário, sumir todos links e limpar tela. Voltar ao normal quando ele terminar.
- Invalidar formulários longos ou incompletos.
- Formulário = tela inicial.
- Nova classe "resposta formulário" com os fields:
	- usuário, respostas, tempo total do formulário, validez (pelo tempo total ou se o usuário saiu durante).
- Acessar os formulários sequencialmente, um por dia.
- Formatar banco de dados em arquivo excel.
- Tela final com último estimulo/teste com várias perguntas.
- Tirar "fale conosco".
- Fazer uma página só, que desce.
- Salvar cronômetro quando terminar o formulário.
- Impedir que o usuario copie qualquer coisa do site.
- Impedir que usuário volte para o formulário caso saia, e torna-lo inválido.
- Só salvar formulários válidos (completos).

PERGUNTAR SE PRECISA:
- Validar resposta do formulario apenas quando este acabar.
- Implementar mudança de senha.
- Implementar confirmação de email.
- Pedir confirmação se quer sair. 

DESNESCESSÁRIO:
- Implementar mudança de senha por meio do email
- Permitir entrar com email
